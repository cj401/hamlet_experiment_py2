################################################################################
# 
# Build scripts  
# =============
#
# This file (${SRC_DIR}Make/scripts/build-2) is sourced by the script "build"
# after it has determined the value of SRC_DIR. In order to be able to move src
# directories without problem, each source directory has a copy of the script
# "build", but once SRC_DIR is known, then we know where to find the build
# tools. 
#
# The main purpose of the build scripts is to normalize the make environment,
# and to implement some functionality that is difficult to do in a robust
# portable way for all flavors of make. 
#
################################################################################

if (! $?KJB_QUIET ) then
    set start_time = `date`
endif 

set args = "$*"

if ( ! $?KJB_QUIET ) then
    echo " "
    echo "Build start for ${args}: ${start_time}"
    echo " "
endif 

################################################################################
#
# We first set up the environment for the compile using the scripts init_machine
# and init_compile. 
#
# Sourcing init_machine and init_compile is often redundant. It is safest to do
# it every compile, but this takes a bit of time. If we are using Kobus's
# environment  we compile faster by not sourcing those files everytime. In this
# case, we can use set_gcc to update things if we expect that the external
# enviroment has changed. To force sourcing init_machine and init_compile
# everytime, one can set the environment variable KJB_FORCE_INIT. 
#
# Kobus's environment also provides an alternative way to compile through "mk"
# which assumes that Makefiles are up to date and calls make directly and also
# provides additional control over where errors go and some filtering of them.
# (Some of the capability is making its way into this script). 
#
# On the subject of faster compiline, if we call make with the target "code"
# then the makefiles are not checked for being up to date which can save up to a
# second or so for a large program.
#
if ($?KJB_VERBOSE) then
    echo "" 
    echo "Sourcing ${SRC_DIR}Make/init_machine"
endif 

source ${SRC_DIR}Make/init_machine

if ($?KJB_VERBOSE) then
    echo "Sourcing ${SRC_DIR}Make/init_compile"
endif 

source ${SRC_DIR}Make/init_compile

setenv CWD "${cwd}"

################################################################################

if ($?KJB_VERBOSE) then
   set supress_jobserver_msg = " cat "
else if ( $?KJB_QUIET ) then
   # Get ride of some anoying messages. However, this is a hack.  We cannot use
   # grep because it can exit with 1. We also have yet to control how spaces in
   # the search string can get parsed properly. So we do without for now. 
   set supress_jobserver_msg = ' sed /jobserver/d' 
else 
   set supress_jobserver_msg = ' sed /jobserver/d' 
endif 

################################################################################

set make_extra_opts = ""

if ($?KJB_MAKE_DEBUG) then 
    set make_extra_opts = "${make_extra_opts} ${KJB_MAKE_OPTS_DEBUG}"
endif 

if ($?FORCE_STOP) then
    if ($?KJB_VERBOSE) then
        echo "Forcing stopping after an error due to env var FORCE_STOP being set"
    endif 

    set make_extra_opts = "${make_extra_opts} ${KJB_MAKE_OPTS_STOP}"
endif 

if ($?KJB_QUIET) then
    set make_extra_opts = "${make_extra_opts} ${KJB_MAKE_OPTS_SILENT}"
endif 

setenv KJB_MAKE_SERIAL "${KJB_MAKE_SERIAL} ${make_extra_opts}"
setenv KJB_MAKE_PAR    "${KJB_MAKE_PAR} ${make_extra_opts}"

if ($?FORCE_SERIAL) then
    if ($?KJB_VERBOSE) then
        echo "Forcing serial make due to env var FORCE_SERIAL being set"
    endif 

    setenv KJB_MAKE "${KJB_MAKE_SERIAL}"
else 
    setenv KJB_MAKE "${KJB_MAKE_PAR}"
endif  

################################################################################

# The default warn level is 2. To simplify changing the warn level, we check it
# evertime, which is a bit excessive. However, it is better than forcing
# cleaning the cache. 

if (${KJB_WARN_LEVEL} == 0) then
    setenv CC_KJB_WARNINGS "${CC_KJB_WARN_0}"
    setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_0}"
    setenv F77_KJB_WARNINGS "${F77_KJB_WARN_0}"
    setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_DEFAULT_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} == 1) then
    setenv CC_KJB_WARNINGS "${CC_KJB_WARN_1}"
    setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_1}"
    setenv F77_KJB_WARNINGS "${F77_KJB_WARN_1}"
    setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_DEFAULT_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} == 2) then
    setenv CC_KJB_WARNINGS "${CC_KJB_WARN_2}"
    setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_2}"
    setenv F77_KJB_WARNINGS "${F77_KJB_WARN_2}"
    setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_DEFAULT_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} == 3) then
    setenv CC_KJB_WARNINGS "${CC_KJB_WARN_3}"
    setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_3}"
    setenv F77_KJB_WARNINGS "${F77_KJB_WARN_3}"
    setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_DEFAULT_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} >= 4) then
    setenv CC_KJB_WARNINGS "${CC_KJB_WARN_4}"
    setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_4}"
    setenv F77_KJB_WARNINGS "${F77_KJB_WARN_4}"
    setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_ALLPASS_MSG_FILTER}"
endif 

if ($USE_SHARED_WARNINGS) then 
    kjb_setenv CC_SHARED_WARNINGS "${CC_KJB_WARNINGS}"
endif 

################################################################################

#
# Because we have been sourced by build which has freshly computed SRC_DIR, it
# does not matter if we use XXX_DIR versus XXX_PATH, unless we change the
# directory, in which case the relative dirs will be wrong. Thus it is safest to
# use XXX_PATH.
#

if ($?KJB_VERBOSE) then
    echo "" 
    echo =================  variable values in build-2 =========================
    echo "" 

    echo "MACHINE:                ${MACHINE}"
    echo "OS:                     ${OS}"

    if ($?UBUNTU_RELEASE) then
       if ("${UBUNTU_RELEASE}" == "14.04") then
            echo "UBUNTU_RELEASE:         ${UBUNTU_RELEASE}"
       endif 
    endif 

    echo " "
    echo "SHELL_FOR_MAKE:         ${SHELL_FOR_MAKE}"
    echo "CWD:                    ${CWD}"
    echo "SRC_DIR:                ${SRC_DIR}"
    echo "SRC_PATH:               ${SRC_PATH}"
    echo "KJB_LIB_DIR:            ${KJB_LIB_DIR}"
    echo "KJB_LIB_PATH:           ${KJB_LIB_PATH}"
    echo "MAKE_DIR:               ${MAKE_DIR}"
    echo "MAKE_PATH:              ${MAKE_PATH}"
    echo "MAKE_SCRIPT_DIR:        ${MAKE_SCRIPT_DIR}"
    echo "MAKE_SCRIPT_PATH:       ${MAKE_SCRIPT_PATH}"
    echo "MAKE_FLAVOR:            ${MAKE_FLAVOR}"
    echo "KJB_DIFF_TEST:          ${KJB_DIFF_TEST}"
    echo "KJB_STAT_FLAVOR:        ${KJB_STAT_FLAVOR}"
    echo "VIM_FOR_MAKE:           ${VIM_FOR_MAKE}"
    echo "VIM_SUFFIX:             ${VIM_SUFFIX}"
    echo "PRODUCTION:             ${PRODUCTION}"
    echo "OBJ_DIR:                ${OBJ_DIR}"
    echo "CXX_OBJ_DIR:            ${CXX_OBJ_DIR}"
    echo "LD_OBJ_DIR:             ${LD_OBJ_DIR}"
    echo "REAL_OBJ_DIR:           ${REAL_OBJ_DIR}"
    echo "LOAD_DIRS:              ${LOAD_DIRS}"
    echo "DOC_DIR:                ${DOC_DIR}"
    echo "MAN_DIR:                ${MAN_DIR}"
    echo "HTML_MAN_DIR:           ${HTML_MAN_DIR}"
    echo "CC_KJB_WARNINGS:        ${CC_KJB_WARNINGS}"
    echo "CXX_KJB_WARNINGS:       ${CXX_KJB_WARNINGS}"
    echo "KJB_CPP_MESSAGE_FILTER: ${KJB_CPP_MESSAGE_FILTER}"
    echo "" 
    echo "Default make command:   ${KJB_MAKE}" 
    echo "Serial make command:    ${KJB_MAKE_SERIAL}" 
    echo "" 
    echo =======================================================================
    echo "" 
endif 

################################################################################

if ($?KJB_VERBOSE) then
    setenv KJB_VERBOSE_INDENT ""
endif 

if (! $?KJB_QUIET ) then
    set build_verbose = 1
else 
    set build_verbose = 0
endif 

################################################################################

# It is OK if TMP_SUB_DIRS_VISITED is not set, but if it is set to a list of sub
# direcotory names for some bizarre reason, then things might break. 
#
setenv TMP_SUB_DIRS_VISITED ""

################################################################################

# Currently, at least for me (Kobus), the error messages from gcc are a bit
# screwed up due to some LOCALE inconsistency. Until I get time to figure it
# out, we will just have gcc run in the simplest local environment. 
#
setenv LC_ALL C 

################################################################################

set save_production = "${PRODUCTION}"
set save_kjb_cc = "${KJB_CC}"

# In general, make gives us one argument at a time, but if we get more of them,
# as might be the case that we called ./build directly, then we process them one
# at a time to simplify giving each one particular treatement.
#

if ("${args}" == "") then
    set args = "all"
endif 

foreach arg ($args)
    # echo "+++++++++++++"
    # echo --"${arg}"--
    # echo "+++++++++++++"

    # If multiple make targets are being processed, then we need to make sure
    # that ones that forced settings do not affect the others. 
    #
    if (("${PRODUCTION}" != "${save_production}") || ("${KJB_CC}" != "${save_kjb_cc}")) then
        setenv KJB_CC "${save_kjb_cc}" 
        setenv PRODUCTION "${save_production}"
        setenv FORCE_INIT_COMPILE
        source ${SRC_DIR}Make/init_compile
    endif 

    if ($?KJB_SKIP_DEPEND) then
        set need_depend = 0
    else 
        set need_depend = 1
    endif 

    if ("${arg}" == "confess") then
        setenv KJB_VERBOSE 1
        
        echo " "
        echo "Cleaning the cache because of target confess."
        echo " "

        source ${MAKE_SCRIPT_PATH}clean_cache
        source ${SRC_DIR}Make/init_compile

        continue
    else if ("${arg}" == "all") then
        # Do nothing
    else if (("${arg}" == "depend_dirs") || ("${arg}" == "depend_dir") || ("${arg}" == "depend_depend")) then
        echo "Argument ${arg} is obsolete. Switching it to depend."
        set arg = depend
#     else if ("${arg}" == "depend_again") then
#         echo "Switchin argument ${arg} to depend."
#         set arg = depend
    else if ("${arg}" == "code") then
        # I believe I introduced the target "code" this to do "all" without any depend stuff.
        set need_depend = 0 
        set arg = all
    else if ("${arg}" == "obj_clean") then
        echo " "
        echo "Build script is cleaning up object directories in the current directory and below."
        echo " "

        source ${MAKE_SCRIPT_PATH}clean_obj

        continue
    else if ("${arg}" == "depend_very_clean") then
        echo " "
        echo "Build script is cleaning up Makefiles in current dir, lib, and all KJB libs."
        echo " "

        source ${MAKE_SCRIPT_PATH}clean_global

        continue
    else if ("${arg}" == "depend_clean") then
        echo " "
        echo "Build script is cleaning up Makefiles in current dir (only)."
        echo " "

        source ${MAKE_SCRIPT_PATH}clean_local
  
        continue
    else if ("${arg}" == "doc") then
        set have_cpp = `${MAKE_SCRIPT_PATH}stream_file_names -doxygen -t`
        
        if ("${have_cpp}" == "1") then
            echo "Changing target doc to doxygen."
            set arg = doxygen
        endif 
    else
        set arg_with_dot_c = ""
        set obj_dir = "${OBJ_DIR}" 

        set arg_without_dot_c1 = `echo ${arg} | sed 's/\(.*\)\.c$/\1/'`
        set arg_without_dot_c2 = `echo ${arg} | sed 's/\(.*\)\.cpp$/\1/'`
        set arg_without_dot_c3 = `echo ${arg} | sed 's/\(.*\)\.cxx$/\1/'`
        set arg_without_dot_c4 = `echo ${arg} | sed 's/\(.*\)\.cc$/\1/'`
    
        if (("${arg}" != "${arg_without_dot_c1}") && (-e "${arg}")) then
            set arg_with_dot_c = "${arg}"
            set arg_without_dot_c = "${arg_without_dot_c1}"
        else if (("${arg}" != "${arg_without_dot_c2}") && (-e "${arg}")) then
            set arg_with_dot_c = "${arg}"
            set obj_dir = "${CXX_OBJ_DIR}" 
            set arg_without_dot_c = "${arg_without_dot_c2}"
        else if (("${arg}" != "${arg_without_dot_c3}") && (-e "${arg}")) then
            set arg_with_dot_c = "${arg}"
            set arg_without_dot_c = "${arg_without_dot_c3}"
            set obj_dir = "${CXX_OBJ_DIR}" 
        else if (("${arg}" != "${arg_without_dot_c4}") && (-e "${arg}")) then
            set arg_with_dot_c = "${arg}"
            set arg_without_dot_c = "${arg_without_dot_c4}"
            set obj_dir = "${CXX_OBJ_DIR}" 
        else 
            if ((-e ${arg}.c) && (${OBJ_DIR} != "")) then
                set arg_without_dot_c = "${arg}"
                set arg_with_dot_c = "${arg}.c"
            else 
                foreach suffix (cpp cxx C cc)
                    if ((-e ${arg}.${suffix}) && (${OBJ_DIR} != "")) then
                        set arg_without_dot_c = "${arg}"
                        set arg_with_dot_c = "${arg}.${suffix}"
                        set obj_dir = "${CXX_OBJ_DIR}" 
                        break
                    endif 
                end 
            endif 
        endif 

        if ("${arg_with_dot_c}" == "") then
            if (-e "${arg}.c") then
                set arg_with_dot_c = "${arg}.c"
            else if (-e "${arg}.cpp") then
                set arg_with_dot_c = "${arg}.cpp"
            else if (-e "${arg}.cxx") then
                set arg_with_dot_c = "${arg}.cxx"
            else if (-e "${arg}.cc") then
                set arg_with_dot_c = "${arg}.cc"
            else if (-e "${arg}.C") then
                set arg_with_dot_c = "${arg}.C"
            endif 

            if ("${arg_with_dot_c}" != "") then
                set arg_without_dot_c = "${arg}" 
            endif 
        endif

        if ("${arg_with_dot_c}" != "") then
            set noglob 

            set old_arg = "${arg}"

            set test_main = `${MAKE_SCRIPT_PATH}stream_file_names -m -t ${arg_with_dot_c}`

            if ("${test_main}") then
                set arg = "${LD_OBJ_DIR}${arg_without_dot_c}"
            else
                # A bit of a hack. Currently, our makefiles use full paths for
                # lib dirs, and relative paths for non lib dirs. This is
                # potentially a sign that we need a bit of design adjustment.
                # However, for now, we hack around it for the purpose of
                # switching source file args to object args. 
                #
                set test_lib_dir = `echo ${cwd} | grep -c 'lib/[^/][^/]*$'`

                if (${test_lib_dir}) then
                    set arg = "${cwd}/${obj_dir}${arg_without_dot_c}.o"
                else
                    set arg = "${obj_dir}${arg_without_dot_c}.o"
                endif 
            endif 

            echo "Switching target ${old_arg} to ${arg}"

            unset noglob 
        endif 
    endif 

    if (! -e Makefile-dirs) then
        # This is not needed with gmake, but it is the same thing that gmake
        # would do first so it is OK to keep. 
        #
        # We cannot have an empty Makefile-dirs if we are in a library
        # directory. We need the first part which can be built without
        # Include_lines/sub_libs_needed, although the implemenation below builds
        # that also.  Hence if Makefile-dirs does not exist, we need to build it
        # here, especially for versions of make that break when we include
        # non-existant files.
        #
        if ($?KJB_VERBOSE) then
            echo "Script build-2 is building Makefile-dirs indirectly using scripts build_file_list and build_include_lines."
        endif 

        # Makefile-dirs is made as a side effect of the following.
        ${MAKE_SCRIPT_PATH}build_file_list
        if (${status}) then
            echo "Building initial Makefile-dirs with script build_file_list failed."
            exit 1
        endif

        ${MAKE_SCRIPT_PATH}build_include_lines
        if (${status}) then
            echo "Building initial Makefile-dirs with script build_include_lines failed."
            exit 1
        endif

        if ($?KJB_VERBOSE) then
            echo "Script build-2 has finished building Makefile-dirs in advance of calling make."
        endif 
    endif

    # Some flavors of make will die if files that are included don't exist.
    # Others like gmake are happy to try to build them for you if it can find a
    # rule after reading in the whole works. If this is the behaviour, it is
    # better for us. 
    #
    if (("${MAKE_FLAVOR}" != "gmake") || ($?FORCE_MAKEFILE_CREATION)) then
        if ($?KJB_VERBOSE) then
            echo "Script build-2 is ensuring the existance of Makefiles."
        endif 

        if (! -e Makefile-depend) then
            ${KJB_TOUCH_1990} Makefile-depend
        endif

        if (! -e Makefile-libs-needed) then
            ${KJB_TOUCH_1990} Makefile-libs-needed
        endif

        if (-e Makefile-include) then
            if (! -e Makefile-library) then
                ${KJB_TOUCH_1990} Makefile-library
            endif 

            if (! -e Include_lines/Makefile-include-lines) then
                ${KJB_MKDIR} Include_lines
                ${KJB_TOUCH_1990} Include_lines/Makefile-include-lines
            endif 

            if (! -e Include_lines/Makefile-depend-incl-dot-h) then
                ${KJB_MKDIR} Include_lines
                ${KJB_TOUCH_1990} Makefile-depend-incl-dot-h
            endif
        endif 
    endif 

    if (${need_depend}) then
        # set temp_depend_targets = "Include_lines/file_list.new Include_lines/include_lines.new Include_lines/sub_libs_needed depend"
        # set temp_depend_targets = "file_list.new include_lines.new sub_libs_needed depend"
        #
        # The target "depend_again" is a self-documenting way to do "depend" a
        # second time. We duplicate the target "depend" because in a few cases,
        # the first build of Makefile-depend creates dependencies for itself via
        # the variable DEPEND_DEPENDENCIES.
        #
        set temp_depend_targets = "file_list.new include_lines.new depend depend_again"

        # If we ask for one of the targets listed above, we interpret that as
        # building only the depends, and only up to the target asked for. 
        #
        set depend_only = 0 
        set depend_targets = ""

        foreach temp_depend_target (${temp_depend_targets})
            set depend_targets = "${depend_targets} ${temp_depend_target}"

            if ("${arg}" == "${temp_depend_target}") then
                set depend_only = 1
                # break
            endif 
        end

        # echo depend_targets: $depend_targets

        set kjb_depend_make = "${KJB_MAKE}" 

        set try = 0

        while (${try} < 2) 
            set iteration = 0
            set error_found = 0

            while (1) 
                set do_it_again = 0

                @ iteration += 1

                foreach depend_target (${depend_targets})
                    if ($?KJB_VERBOSE) then
                        echo " "
                        echo "Script build-2 is building depend target: ${depend_target} in directory ${cwd}."
                    endif 

                    ${kjb_depend_make} -f Makefile-2 ${depend_target} |& ${supress_jobserver_msg}

                    if ($status) then 
                        echo "Failed to make target ${depend_target} in ${cwd}"
                        set error_found = 1
                        break
                    endif 

                    # If we need to do it again, then no point in building the
                    # rest. Start from scratch.
                    #
                    if (${do_it_again}) then
                        break
                    endif 
                end 

                if (${error_found}) then 
                    break
                else if (${do_it_again}) then
                    if (${iteration} > 3) then
                        echo "Too many iterations in making depend. This is likely a bug."
                        exit 1 
                    else 
                        echo "#############################################################"
                        echo "Re-building depends because Makefile-dirs got updated."
                        echo "#############################################################"
                        continue
                    endif 
                else 
                    break
                endif 
            end

            if (${error_found}) then
                if ($?SKIP_DEPEND_RETRY) then
                    echo " "
                    echo "Skipping retry of building makefiles, as SKIP_DEPEND_RETRY is set."
                    echo "Perhaos a 'make depend_clean' is needed, and/or cache cleaning."
                    echo " "
                    exit 1 
                else if (${try} == 0) then
                    echo " "
                    echo "Forcing rebuild of some files, and trying again (and forcing serial make)."
                    echo "Disable with SKIP_DEPEND_RETRY"
                    echo " "

                    source ${MAKE_SCRIPT_PATH}clean_global
                    set kjb_depend_make = "${KJB_MAKE_SERIAL}" 

                    ${MAKE_SCRIPT_PATH}build_file_list
                    ${MAKE_SCRIPT_PATH}build_include_lines
                    ${KJB_TOUCH_1990} Makefile-depend
                    ${KJB_TOUCH_1990} Makefile-libs-needed

                    if (! -e Makefile-library) then
                        ${KJB_TOUCH_1990} Makefile-library
                        ${KJB_TOUCH_1990} Makefile-depend-incl-dot-h
                    endif 
                else 
                    echo " "
                    echo "Unable to build makefiles."
                    echo " "
                    exit 1
                endif 
            else 
                break
            endif 

            @ try += 1 
        end

        if (${depend_only}) continue

    endif 


    if (("${arg}" == "all") || ("${arg}" == "code")) then
        if ($?NUM_CPU) then
            if ($NUM_CPU > 1) then
                if ($?KJB_VERBOSE) then
                    echo " "
                    echo "Script build-2 is building dir_made in ${cwd} due to parallel make." 
                    echo ${KJB_MAKE_SERIAL} -f Makefile-2 dir_made 
                endif 
                ${KJB_MAKE_SERIAL} -f Makefile-2 dir_made |& ${supress_jobserver_msg}
                if (${status}) then 
                    echo "Failed to make target 'dir_made' in ${cwd}"
                    exit 1
                endif 
            endif
        endif
    else if (("${arg}" == "doc") || ("${arg}" == "doc_program")) then
        # 
        # We only want to make the documentation tools using the default C
        # compiler and production mode. Setting KKJB_CC to empty asks
        # init_comple to choose the compiler. 
        #
        setenv KJB_CC "" 
        setenv PRODUCTION 1
        setenv FORCE_INIT_COMPILE
        source ${SRC_DIR}Make/init_compile

        pushd ${MAKE_PATH} > /dev/null
            pushd util > /dev/null
                pushd c2man-2.40-kobus >& /dev/null
                    if ($?KJB_VERBOSE) then
                        echo " "
                        echo "Script build-2 is building documentation tools in ${cwd}." 
                    endif 
                    ${KJB_MAKE_SERIAL} make_bin |& ${supress_jobserver_msg}
                    
                    if (${status}) then 
                        echo "Failed to make target 'make_bin' in ${cwd}"
                        exit 1
                    endif 
                popd > /dev/null

                if ($?KJB_VERBOSE) then
                    echo " "
                    echo "Script build-2 is building documentation tools in ${cwd}." 
                endif 
                ${KJB_MAKE_SERIAL} make_bin |& ${supress_jobserver_msg}
                
                if (${status}) then 
                    echo "Failed to make target 'make_bin' in ${cwd}"
                    exit 1
                endif 
            popd > /dev/null
        popd > /dev/null

        if ($?NUM_CPU) then
            if ($NUM_CPU > 1) then
                if ($?KJB_VERBOSE) then
                    echo "Script build-2 is building doc_dir_made in ${cwd} due to parallel make." 
                endif 
                ${KJB_MAKE_SERIAL} -f Makefile-2 doc_dir_made |& ${supress_jobserver_msg}
                if (${status}) then 
                    echo "Failed to make target doc_dir_made in ${cwd}"
                    exit 1
                endif 
            endif 
        endif 
    else if (("${arg}" == "bin") || ("${arg}" == "misc_bin") || ("${arg}" == "load") || ("${arg}" == "misc_load")) then
        set force_prod_bin = 1
        if ($?DONT_FORCE_PROD_BIN) then
            if ($DONT_FORCE_PROD_BIN) then
                set force_prod_bin = 0
            endif 
        endif 

        if (${force_prod_bin}) then
            echo " "
            echo "Forcing production build for target ${arg}."
            echo "To disable this default behaviour, set env var DONT_FORCE_PROD_BIN to 1."
            echo " "
            setenv PRODUCTION 1
            source ${SRC_DIR}Make/init_compile
            echo " "
        endif 
#     else if ("${arg}" == "regress") then
#         set KJB_MAKE = "${KJB_MAKE_SERIAL}" |& ${supress_jobserver_msg}
    endif 

    if ($?KJB_VERBOSE) then
        echo " "
        echo "Script build-2 is building target: ${arg} in directory ${cwd}."
        echo "Make command: ${KJB_MAKE} -f Makefile-2 ${arg}"
        echo " "
    endif 

    # ${KJB_MAKE} ${KJB_MAKE_OPTS_KEEP} -f Makefile-2 ${arg} 
    ${KJB_MAKE} -f Makefile-2 ${arg} |& ${supress_jobserver_msg}

    if (${status}) then 
        echo "Failed to make target ${arg} in ${cwd}"
        exit 1
    endif 
end

if ( ! $?KJB_QUIET ) then
    set end_time = `date`

    echo " "
    echo "Build end for ${args}:   ${end_time}"
    echo " "

    svn info >& /dev/null
    if (! $status) then 
        set have_changes = `svn status | grep -v -c '^?'`
        if ($have_changes) then
            echo "Pending SVN commits: " 
            svn status | grep -v '^?' | sed 's/^/    /'
        endif 
    endif 

    echo " "
endif 

